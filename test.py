import gspread
from google.oauth2.service_account import Credentials
import os
import re
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

def is_date_cell(cell_value):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —è—á–µ–π–∫–∞ –¥–∞—Ç–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î.–ú–ú"""
    if not cell_value:
        return False
    
    cell_value = str(cell_value).strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì
    date_pattern_full = r'^\d{1,2}\.\d{1,2}\.\d{4}$'
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥)
    date_pattern_short = r'^\d{1,2}\.\d{1,2}$'
    
    return bool(re.match(date_pattern_full, cell_value) or re.match(date_pattern_short, cell_value))

def parse_date_cell(date_str):
    """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î.–ú–ú"""
    try:
        date_str = str(date_str).strip()
        
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì
        if re.match(r'^\d{1,2}\.\d{1,2}\.\d{4}$', date_str):
            return datetime.strptime(date_str, '%d.%m.%Y').date()
        
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
        elif re.match(r'^\d{1,2}\.\d{1,2}$', date_str):
            current_year = datetime.now().year
            date_with_year = f"{date_str}.{current_year}"
            return datetime.strptime(date_with_year, '%d.%m.%Y').date()
        
        return None
    except ValueError:
        return None

def clean_name(name):
    """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ –æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if not name:
        return ""
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–∫–æ–±–∫–∞—Ö –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    name = re.sub(r'\([^)]*\)', '', name)
    name = re.sub(r'—Å \d+:\d+', '', name)
    name = re.sub(r'\([^)]*\)', '', name)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    name = name.replace('<br>', ', ').strip()
    name = re.sub(r'\s+', ' ', name)
    
    return name.strip(' ,')

def test_parsing():
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        GOOGLE_SHEET_URL = os.getenv('GOOGLE_SHEET_URL')
        CREDENTIALS_FILE = os.getenv('GOOGLE_CREDENTIALS_FILE', 'credentials.json')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        scope = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/drive"
        ]
        
        creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=scope)
        client = gspread.authorize(creds)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        sheet = client.open_by_url(GOOGLE_SHEET_URL)
        worksheet = sheet.worksheet("–í–µ—á–µ—Ä–Ω–µ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        all_values = worksheet.get_all_values()
        
        print("üîç –ü–æ–∏—Å–∫ –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏ –î–î.–ú–ú...")
        print("=" * 70)
        
        date_count = 0
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –∏ –∫–æ–ª–æ–Ω–∫–∞–º
        for row_idx, row in enumerate(all_values):
            for col_idx, cell_value in enumerate(row):
                if is_date_cell(cell_value):
                    date_value = parse_date_cell(cell_value)
                    if date_value:
                        date_count += 1
                        # –ò—â–µ–º –¥–µ–∂—É—Ä–Ω–æ–≥–æ –ø–æ–¥ –¥–∞—Ç–æ–π
                        if row_idx + 1 < len(all_values):
                            duty_person_raw = all_values[row_idx + 1][col_idx]
                            duty_person_clean = clean_name(duty_person_raw)
                            
                            print(f"üìÖ –ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞: {cell_value} -> {date_value.strftime('%d.%m.%Y')}")
                            print(f"üë§ –î–µ–∂—É—Ä–Ω—ã–π: {duty_person_clean} (–æ—Ä–∏–≥–∏–Ω–∞–ª: '{duty_person_raw}')")
                            print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {chr(65 + col_idx)}{row_idx + 1} -> {chr(65 + col_idx)}{row_idx + 2}")
                            print("-" * 50)
        
        print(f"‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –¥–∞—Ç: {date_count}")
        
        # –ü–æ–∫–∞–∂–µ–º –ø—Ä–∏–º–µ—Ä –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("\nüìã –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã (–ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫):")
        print("=" * 70)
        for i, row in enumerate(all_values[:10]):
            # –û–±—Ä–µ–∑–∞–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ —Å–ø—Ä–∞–≤–∞
            clean_row = [cell for cell in row if cell != '']
            if clean_row:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                print(f"–°—Ç—Ä–æ–∫–∞ {i+1}: {clean_row}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    test_parsing()